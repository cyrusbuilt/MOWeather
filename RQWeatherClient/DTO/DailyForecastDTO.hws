@INCLUDE "CloudsDTO.hws"
@INCLUDE "ForecastPrecipitationDTO.hws"
@INCLUDE "ForecastSysDTO.hws"
@INCLUDE "MainDTO.hws"
@INCLUDE "WeatherConditionDTO.hws"
@INCLUDE "WindDTO.hws"
@INCLUDE "../../StringLib/StringUtils.hws"

Const #K_DF_CLOUDS_KEY = "clouds"
Const #K_DF_MAIN_KEY = "main"
Const #K_DF_POSS_PRECIP_KEY = "possibilityOfPrecipitation"
Const #K_DF_RAIN_KEY = "rain"
Const #K_DF_SNOW_KEY = "snow"
Const #K_DF_SYSTEM_KEY = "system"
Const #K_DF_TIMESTAMP_KEY = "timestamp"
Const #K_DF_VISIBILITY_KEY = "visibility"
Const #K_DF_WEATHER_KEY = "weather"
Const #K_DF_WIND_KEY = "wind"
Const #K_DF_TIMESTAMP_TEXT_KEY = "timestampText"

Global DailyForecastDTO = {}
DailyForecastDTO.possibilityOfPrecipitation = 0
DailyForecastDTO.visibility = 0
DailyForecastDTO.clouds = {}
DailyForecastDTO.main = {}
DailyForecastDTO.rain = {}
DailyForecastDTO.snow = {}
DailyForecastDTO.system = {}
DailyForecastDTO.timestamp = {}
DailyForecastDTO.weather = {}
DailyForecastDTO.wind = {}

Function DailyForecastDTO:New()
    Return (CopyTable(self))
EndFunction

Function DailyForecastDTO:_populateWeather(inTable, instance)
    Local result = WeatherConditionDTO:LoadFromTable(inTable)
    InsertItem(instance.weather, result)
EndFunction

Function DailyForecastDTO:LoadFromTable(inTable)
    Local instance = DailyForecastDTO:New()

    If (IsNil(inTable) Or IsTableEmpty(inTable))
        Return (instance)
    EndIf
	
	If (HaveItem(inTable, #K_DF_VISIBILITY_KEY))
		instance.visibility = inTable.visibility
	EndIf

    If (HaveItem(inTable, #K_DF_CLOUDS_KEY))
        instance.clouds = CloudsDTO:LoadFromTable(inTable.clouds)
    EndIf

    If (HaveItem(inTable, #K_DF_MAIN_KEY))
        instance.main = MainDTO:LoadFromTable(inTable.main)
    EndIf

    If (HaveItem(inTable, #K_DF_POSS_PRECIP_KEY))
        instance.possibilityOfPrecipitation = inTable.possibilityOfPrecipitation
    EndIf

    If (HaveItem(inTable, #K_DF_RAIN_KEY))
        instance.rain = ForecastPrecipitationDTO:LoadFromTable(inTable.rain)
    EndIf

    If (HaveItem(inTable, #K_DF_SNOW_KEY))
        instance.snow = ForecastPrecipitationDTO:LoadFromTable(inTable.snow)
    EndIf

    If (HaveItem(inTable, #K_DF_SYSTEM_KEY))
        instance.system = ForecastSysDTO:LoadFromTable(inTable.system)
    EndIf

    If (HaveItem(inTable, #K_DF_TIMESTAMP_KEY))
        Local success, tstamp = StringUtils.ParseDateFromYMDHMSString(inTable.timestamp)
        If success
            instance.timestamp = tstamp
        EndIf
    EndIf

    If (HaveItem(inTable, #K_DF_WEATHER_KEY))
        If Not IsNil(inTable.weather) And Not IsTableEmpty(inTable.weather)
			Local n, i = NextItem(inTable.weather)
			While GetType(n) <> #NIL
        		self:_populateWeather(i, instance)
				n, i = NextItem(inTable.weather, n)
			Wend
		EndIf
    EndIf

    If (HaveItem(inTable, #K_DF_WIND_KEY))
        instance.wind = WindDTO:LoadFromTable(inTable.wind)
    EndIf

    If (HaveItem(inTable, #K_DF_TIMESTAMP_TEXT_KEY))
        instance.timestampText = inTable.timestampText
    EndIf

    Return (instance)
EndFunction
