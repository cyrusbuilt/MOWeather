@INCLUDE "WindDirection.hws"

Const #K_W_SPEED_KEY = "speed"
Const #K_W_DEGREES_KEY = "degrees"
Const #K_W_GUST_KEY = "gust"

Global WindDTO = {}
WindDTO.speed = 0
WindDTO.degrees = 0
WindDTO.gust = 0

Function WindDTO:New()
    Return (CopyTable(self))
EndFunction

Function WindDTO:LoadFromTable(inTable)
    Local instance = WindDTO:New()

    If (IsNil(inTable) Or IsTableEmpty(inTable))
        Return (instance)
    EndIf

    If (HaveItem(inTable, #K_W_SPEED_KEY))
        instance.speed = inTable.speed
    EndIf

    If (HaveItem(inTable, #K_W_DEGREES_KEY))
        instance.degrees = inTable.degrees
    EndIf

    If (HaveItem(inTable, #K_W_GUST_KEY))
        instance.gust = inTable.gust
    EndIf

    Return (instance)
EndFunction

Function WindDTO:ToWindDirection()
    Local result = ""
    Local sectors = {}
    sectors[0] = #WindDirection_N
    sectors[1] = #WindDirection_NNE
    sectors[2] = #WindDirection_NE
    sectors[3] = #WindDirection_ENE
    sectors[4] = #WindDirection_E
    sectors[5] = #WindDirection_ESE
    sectors[6] = #WindDirection_SE
    sectors[7] = #WindDirection_SSE
    sectors[8] = #WindDirection_S
    sectors[9] = #WindDirection_SSW
    sectors[10] = #WindDirection_SW
    sectors[11] = #WindDirection_WSW
    sectors[12] = #WindDirection_W
    sectors[13] = #WindDirection_WNW
    sectors[14] = #WindDirection_NW
    sectors[15] = #WindDirection_NNW
    sectors[16] = #WindDirection_N

    Local modulo = self.degrees % 360
    Local index = Round(modulo / 22.5)
    If index >= 0 And index <= 16
        result = sectors[index]
    EndIf

    Return (result)
EndFunction
