@INCLUDE "DTO/ForecastDTO.hws"
@INCLUDE "DTO/GeoDTO.hws"
@INCLUDE "DTO/WeatherResponseDTO.hws"
@INCLUDE "../StringLib/StringUtils.hws"
@INCLUDE "HTTPStatus.hws"

Const #K_RQW_API_ROOT = "/api"
Const #K_RQW_WEATHER_ROOT = "/weather"
Const #K_RQW_GEO_ROOT = "/geo"
Const #K_RQW_CURRENT_ROOT = "/current"
Const #K_RQW_FORECAST_ROOT = "/forecast"


Global RQWeatherClient = {}
RQWeatherClient.VERSION = "1.0.0.0"
RQWeatherClient.Address = ""
RQWeatherClient.Port = 0
RQWeatherClient.LastHttpStatus = HTTPStatus.STATUS_200_OK
RQWeatherClient._hurl = Nil
RQWeatherClient._recvBuffer = Nil
RQWeatherClient._connected = False
RQWeatherClient._downloading = False
RQWeatherClient._dlHandle = Nil
RQWeatherClient.OnProcessingRequest = Function() EndFunction
RQWeatherClient.OnProcessingComplete = Function() EndFunction
RQWeatherClient.OnApiError = Function(errorCode, desc, inUrl, inResponse) EndFunction
RQWeatherClient.OnApiSuccess = Function(errorCode, desc) EndFunction
RQWeatherClient.OnConnected = Function() EndFunction
RQWeatherClient.OnDownloadComplete = Function(url, httpStatus, filePath) EndFunction
RQWeatherClient.OnXferProgress = Function(totalBytes, bytesReceived) EndFunction

Function RQWeatherClient._recvData(data$)
    RQWeatherClient._recvBuffer = RQWeatherClient._recvBuffer .. data$
EndFunction

Function RQWeatherClient._getBaseURL()
    Return (RQWeatherClient.Address .. ":" .. ToString(RQWeatherClient.Port) .. #K_RQW_API_ROOT)
EndFunction

Function RQWeatherClient._weatherRoot()
	Return (RQWeatherClient._getBaseURL() .. #K_RQW_WEATHER_ROOT)
EndFunction

Function RQWeatherClient._currentWeatherRoot()
	Return (RQWeatherClient._weatherRoot() .. #K_RQW_CURRENT_ROOT)
EndFunction

Function RQWeatherClient._forecastRoot()
	Return (RQWeatherClient._weatherRoot() .. #K_RQW_FORECAST_ROOT)
EndFunction

Function RQWeatherClient._geoRoot()
	Return (RQWeatherClient._getBaseURL() .. #K_RQW_GEO_ROOT)
EndFunction

Function RQWeatherClient._eventProcReq()
    If (GetType(RQWeatherClient.OnProcessingRequest) = #FUNCTION)
        RQWeatherClient.OnProcessingRequest()
    EndIf
EndFunction

Function RQWeatherClient._eventProcComplete()
    If (GetType(RQWeatherClient.OnProcessingComplete) = #FUNCTION)
        RQWeatherClient.OnProcessingComplete()
    EndIf
EndFunction

Function RQWeatherClient._eventApiError(errorCode, desc, inUrl, inResponse)
    If (GetType(RQWeatherClient.OnApiError) = #FUNCTION)
        RQWeatherClient.OnApiError(errorCode, desc, inUrl, inResponse)
    EndIf
EndFunction

Function RQWeatherClient._eventApiSuccess(errorCode, desc)
    If (GetType(RQWeatherClient.ApiSuccess) = #FUNCTION)
        RQWeatherClient.OnApiSuccess(errorCode, desc)
    EndIf
EndFunction

Function RQWeatherClient._eventConnected()
    If (GetType(RQWeatherClient.OnConnected) = #FUNCTION)
        RQWeatherClient.OnConnected()
    EndIf
EndFunction

Function RQWeatherClient._eventDownloadComplete(inUrl, stat, localFile)
    If (GetType(RQWeatherClient.OnDownloadComplete) = #FUNCTION)
        RQWeatherClient.OnDownloadComplete(inUrl, stat, localFile)
    EndIf
EndFunction

Function RQWeatherClient._eventXferProgress(prg)
    If (GetType(RQWeatherClient.OnXferProgress) = #FUNCTION)
        RQWeatherClient.OnXferProgress(prg.Total, prg.Count)
    EndIf
EndFunction

Function RQWeatherClient._preflight(inUrl, inTimeout)
    RQWeatherClient.LastHttpStatus = HTTPStatus.STATUS_NO_STATUS
    ; Do HEAD and check errs?
    ; Parse and get status
    ; Check http status
    ; fire fail/success event
    ; return error or not
EndFunction

Function RQWeatherClient._getWithNotification()
    RQWeatherClient._eventProcReq()
    ; Preflight(url, timeout) (empty str on fail)
    ; result = Fetch result
    ; ProcComp
    ; ret result
EndFunction

Function RQWeatherClient.Init()
    RQWeatherClient._hurl = hurl.Easy()
    RQWeatherClient._hurl:SetOpt_HTTPHeader({"Content-Type: application/json"})
    RQWeatherClient._hurl:SetOpt_HTTPGet(True)
    RQWeatherClient._hurl:SetOpt_Verbose(True)
    RQWeatherClient._hurl:SetOpt_UserAgent("MOWeather")
	RQWeatherClient._hurl:SetOpt_WriteFunction(RQWeatherClient._recvData)
    RQWeatherClient.LastHttpStatus = HTTPStatus.STATUS_200_OK
    RQWeatherClient._connected = False
    RQWeatherClient._downloading = False
EndFunction

Function RQWeatherClient.Close()
	If RQWeatherClient._downloading And Not IsNil(RQWeatherClient._dlHandle)
		CancelAsyncOperation(RQWeatherClient._dlHandle)
		RQWeatherClient._downloading = False
	EndIf

    If Not (IsNil(RQWeatherClient._hurl))
        RQWeatherClient._hurl:Close()
        RQWeatherClient._hurl = Nil
        RQWeatherClient._recvBuffer = Nil
    EndIf
EndFunction

Function RQWeatherClient.GetCurrent(lat, lon)
    Local url = RQWeatherClient._baseUrl .. "/current?lat="
    url = url .. ToString(lat)
    url = url .. "&lon="
    url = url .. ToString(lon)
    RQWeatherClient._hurl:SetOpt_URL(url)
    RQWeatherClient._recvBuffer = Nil
    RQWeatherClient._hurl:Perform()
    Return (WeatherResponseDTO:ParseFromJsonString(RQWeatherClient._recvBuffer))
EndFunction

Function RQWeatherClient.GetForecast(lat, lon)
    Local url = RQWeatherClient._baseUrl .. "/forecast?lat="
    url = url .. ToString(lat)
    url = url .. "&lon="
    url = url .. ToString(lon)
    RQWeatherClient._hurl:SetOpt_URL(url)
    RQWeatherClient._recvBuffer = Nil
    RQWeatherClient._hurl:Perform()
    Return (ForecastDTO:ParseFromJsonString(RQWeatherClient._recvBuffer))
EndFunction

Function RQWeatherClient.GetGeoData(city, stateCode, countryCode)
	If IsNil(stateCode) Then stateCode = StringUtils.EMPTY
	If IsNil(countryCode) Then countryCode = StringUtils.EMPTY

    stateCode = StringUtils.StripPrettyPrintChars(stateCode)
    countryCode = StringUtils.StripPrettyPrintChars(countryCode)

    Local url = RQWeatherClient._baseUrl .. "/geo?city="
    url = url .. city

    If Not (StringUtils.IsEmpty(stateCode))
        url = url .. stateCode
    EndIf

    If Not (StringUtils.IsEmpty(countryCode))
        url = url .. countryCode
    EndIf

    RQWeatherClient._hurl:SetOpt_URL(url)
    RQWeatherClient._recvBuffer = Nil
    RQWeatherClient._hurl:Perform()
    Return (GeoDTO:ParseFromJsonString(RQWeatherClient._recvBuffer))
EndFunction

Function RQWeatherClient.DownloadFile(inUrl, localFile)
	Local done = False
	RQWeatherClient._downloading = True

    RQWeatherClient._dlHandle = DownloadFile(inUrl, {Async=True, Adapter="hurl", File=localFile}, RQWeatherClient._eventXferProgress)
	Repeat done = ContinueAsyncOperation(RQWeatherClient._dlHandle)
		VWait()
	Until done Or Not RQWeatherClient._downloading
	
	RQWeatherClient._downloading = False
	Local stat = RQWeatherClient._hurl:GetInfo_ResponseCode()
	RQWeatherClient._eventDownloadComplete(inUrl, stat, localFile)
EndFunction
