@INCLUDE "DTO/ForecastDTO.hws"
@INCLUDE "DTO/GeoDTO.hws"
@INCLUDE "DTO/WeatherResponseDTO.hws"
@INCLUDE "../StringLib/StringUtils.hws"
@INCLUDE "HTTPStatus.hws"

Const #K_RQW_API_ROOT = "/api"
Const #K_RQW_WEATHER_ROOT = "/weather"
Const #K_RQW_GEO_ROOT = "/geo"
Const #K_RQW_CURRENT_ROOT = "/current"
Const #K_RQW_FORECAST_ROOT = "/forecast"


Global RQWeatherClient = {}
RQWeatherClient.VERSION = "1.0.0.0"
RQWeatherClient.Address = ""
RQWeatherClient.Port = 0
RQWeatherClient.LastHttpStatus = HTTPStatus.STATUS_200_OK
RQWeatherClient._hurl = Nil
RQWeatherClient._recvBuffer = Nil
RQWeatherClient._connected = False
RQWeatherClient._downloading = False
RQWeatherClient._dlHandle = Nil
RQWeatherClient.OnProcessingRequest = Function() EndFunction
RQWeatherClient.OnProcessingComplete = Function() EndFunction
RQWeatherClient.OnApiError = Function(errorCode, desc, inUrl, inResponse) EndFunction
RQWeatherClient.OnApiSuccess = Function(errorCode, desc) EndFunction
RQWeatherClient.OnConnected = Function() EndFunction
RQWeatherClient.OnDownloadComplete = Function(url, httpStatus, filePath) EndFunction
RQWeatherClient.OnXferProgress = Function(totalBytes, bytesReceived) EndFunction

Function RQWeatherClient._recvData(data$)
    RQWeatherClient._recvBuffer = RQWeatherClient._recvBuffer .. data$
EndFunction

Function RQWeatherClient._getBaseURL()
    Return (RQWeatherClient.Address .. ":" .. ToString(RQWeatherClient.Port) .. #K_RQW_API_ROOT)
EndFunction

Function RQWeatherClient._weatherRoot()
	Return (RQWeatherClient._getBaseURL() .. #K_RQW_WEATHER_ROOT)
EndFunction

Function RQWeatherClient._currentWeatherRoot()
	Return (RQWeatherClient._weatherRoot() .. #K_RQW_CURRENT_ROOT)
EndFunction

Function RQWeatherClient._forecastRoot()
	Return (RQWeatherClient._weatherRoot() .. #K_RQW_FORECAST_ROOT)
EndFunction

Function RQWeatherClient._geoRoot()
	Return (RQWeatherClient._getBaseURL() .. #K_RQW_GEO_ROOT)
EndFunction

Function RQWeatherClient._eventProcReq()
    If (GetType(RQWeatherClient.OnProcessingRequest) = #FUNCTION)
        RQWeatherClient.OnProcessingRequest()
    EndIf
EndFunction

Function RQWeatherClient._eventProcComplete()
    If (GetType(RQWeatherClient.OnProcessingComplete) = #FUNCTION)
        RQWeatherClient.OnProcessingComplete()
    EndIf
EndFunction

Function RQWeatherClient._eventApiError(errorCode, desc, inUrl, inResponse)
    If (GetType(RQWeatherClient.OnApiError) = #FUNCTION)
        RQWeatherClient.OnApiError(errorCode, desc, inUrl, inResponse)
    EndIf
EndFunction

Function RQWeatherClient._eventApiSuccess(errorCode, desc)
    If (GetType(RQWeatherClient.ApiSuccess) = #FUNCTION)
        RQWeatherClient.OnApiSuccess(errorCode, desc)
    EndIf
EndFunction

Function RQWeatherClient._eventConnected()
    If (GetType(RQWeatherClient.OnConnected) = #FUNCTION)
        RQWeatherClient.OnConnected()
    EndIf
EndFunction

Function RQWeatherClient._eventDownloadComplete(inUrl, stat, localFile)
    If (GetType(RQWeatherClient.OnDownloadComplete) = #FUNCTION)
        RQWeatherClient.OnDownloadComplete(inUrl, stat, localFile)
    EndIf
EndFunction

Function RQWeatherClient._eventXferProgress(prg)
    If (GetType(RQWeatherClient.OnXferProgress) = #FUNCTION)
        RQWeatherClient.OnXferProgress(prg.Total, prg.Count)
    EndIf
EndFunction

Function RQWeatherClient._getStatusDesc(status)
    Local desc = StringUtils.EMPTY

    Switch status
    Case HTTPStatus.STATUS_200_OK:
        desc = "OK"
    Case HTTPStatus.STATUS_201_CREATED:
        desc = "Created"
    Case HTTPStatus.STATUS_202_ACCEPTED
        desc = "Accepted"
    Case HTTPStatus.STATUS_203_NON_AUTHORITATIVE_INFO:
        desc = "Non-authoritative info"
    Case HTTPStatus.STATUS_204_NO_CONTENT:
        desc = "No content"
    Case HTTPStatus.STATUS_205_RESET_CONTENT:
        desc = "Reset content"
    Case HTTPStatus.STATUS_206_PARTIAL_CONTENT:
        desc = "Partial content"
    Case HTTPStatus.STATUS_400_BAD_REQUEST:
        desc = "Bad request"
    Case HTTPStatus.STATUS_401_UNAUTHORIZED:
        desc = "Unauthorized"
    Case HTTPStatus.STATUS_403_FORBIDDEN:
        desc = "Forbidden"
    Case HTTPStatus.STATUS_404_NOT_FOUND:
        desc = "Not found"
    Case HTTPStatus.STATUS_405_METHOD_NOT_ALLOWED:
        desc "Method not allowed"
    Case HTTPStatus.STATUS_408_REQUEST_TIMEOUT:
        desc = "Request timed out"
    Case HTTPStatus.STATUS_500_INTERNAL_SERVER_ERROR:
        desc = "Internal server error"
    Case HTTPStatus.STATUS_503_SERVICE_UNAVAILABLE:
        desc = "Service unavailable"
    Case HTTPStatus.STATUS_511_NETWORK_AUTHENTICATION_REQUIRED:
        desc = "Network authentication required"
    Case HTTPStatus.STATUS_NEG_1_SOCKET_TIMEOUT:
        desc = "Socket timeout"
    Case HTTPStatus.STATUS_NO_STATUS:
        desc = "Status unknown" 
    EndSwitch

    Return (desc)
EndFunction

Function RQWeatherClient._gotError(inUrl, inResponse)
    Local errorCode = 0
    Local isError = False
    Local desc = StringUtils.EMPTY

    Local lastError = RQWeatherClient._hurl:GetInfo_ResponseCode()
    If lastError = 0
        errorCode = -1
        isError = True
        desc = "No response"
    ElseIf lastError >= HTTPStatus.STATUS_400_BAD_REQUEST
        errorCode = lastError
        isError = True
        desc = "HTTP ERROR: " .. RQWeatherClient._getStatusDesc(lastError)
    EndIf

    If isError
        RQWeatherClient._eventApiError(errorCode, desc, inUrl, inResponse)
    Else
        RQWeatherClient._eventApiSuccess(errorCode, desc)
    EndIf

    Return (isError)
EndFunction

Function RQWeatherClient._preflight(inUrl, inTimeout)
    ; First, make a HEAD request and check for errors
    RQWeatherClient.LastHttpStatus = HTTPStatus.STATUS_NO_STATUS
    RQWeatherClient._recvBuffer = Nil
    RQWeatherClient._hurl:SetOpt_Nobody(True)
    RQWeatherClient._hurl:SetOpt_URL(inUrl)
    RQWeatherClient._hurl:SetOpt_ConnectTimeout(inTimeout)
    RQWeatherClient._hurl.Perform()
    If RQWeatherClient._gotError(inUrl, RQWeatherClient._recvBuffer)
        Return (False)
    EndIf
    
    ; We didn't get any errors on the HEAD request, so check for empty headers
    Local desc = StringUtils.EMPTY
    Local rawStr = RQWeatherClient._recvBuffer
    If StringUtils.IsEmpty(rawStr)
        desc = "No response from server"
        RQWeatherClient.LastHttpStatus = HTTPStatus.STATUS_NEG_1_SOCKET_TIMEOUT
        RQWeatherClient._eventApiError(RQWeatherClient.LastHttpStatus, desc, inUrl, rawStr)
        Return (False)
    EndIf

    ; We got a good header response. Now parse out the status code
    Local isError = False
    RQWeatherClient.LastHttpStatus = Val(StringUtils.Substring(rawStr, 10, 3))
    desc = RQWeatherClient._getStatusDesc(RQWeatherClient.LastHttpStatus)
    If RQWeatherClient.LastHttpStatus >= HTTPStatus.STATUS_400_BAD_REQUEST
        isError = True
    EndIf

    If isError
        RQWeatherClient._eventApiError(RQWeatherClient.LastHttpStatus, desc, inUrl, rawStr)
    Else
        RQWeatherClient._eventApiSuccess(RQWeatherClient.LastHttpStatus, desc)
    EndIf

    Return (Not isError)
EndFunction

Function RQWeatherClient._getWithNotification(inUrl, inTimeout)
    RQWeatherClient._eventProcReq()

    If Not RQWeatherClient._preflight(inUrl, inTimeout)
        Return StringUtils.EMPTY
    EndIf

    RQWeatherClient._recvBuffer = Nil
    RQWeatherClient._hurl:SetOpt_URL(inUrl)
    RQWeatherClient._hurl:SetOpt_HTTPGet(True)
    RQWeatherClient._hurl:SetOpt_ConnectTimeout(inTimeout)
    RQWeatherClient._hurl:Perform()

    Local result = RQWeatherClient._recvBuffer
    If RQWeatherClient._gotError(inUrl, result)
        result = StringUtils.EMPTY
    EndIf
    
    RQWeatherClient._eventProcComplete()
    Return (result)
EndFunction

Function RQWeatherClient.Init()
    RQWeatherClient._hurl = hurl.Easy()
    RQWeatherClient._hurl:SetOpt_HTTPHeader({"Content-Type: application/json"})
    RQWeatherClient._hurl:SetOpt_HTTPGet(True)
    RQWeatherClient._hurl:SetOpt_Verbose(True)
    RQWeatherClient._hurl:SetOpt_UserAgent("MOWeather")
	RQWeatherClient._hurl:SetOpt_WriteFunction(RQWeatherClient._recvData)
    RQWeatherClient.LastHttpStatus = HTTPStatus.STATUS_200_OK
    RQWeatherClient._connected = False
    RQWeatherClient._downloading = False
EndFunction

Function RQWeatherClient.Close()
	If RQWeatherClient._downloading And Not IsNil(RQWeatherClient._dlHandle)
		CancelAsyncOperation(RQWeatherClient._dlHandle)
		RQWeatherClient._downloading = False
	EndIf

    If Not (IsNil(RQWeatherClient._hurl))
        RQWeatherClient._hurl:Close()
        RQWeatherClient._hurl = Nil
        RQWeatherClient._recvBuffer = Nil
    EndIf
EndFunction

Function RQWeatherClient.GetCurrent(lat, lon)
    Local url = RQWeatherClient._baseUrl .. "/current?lat="
    url = url .. ToString(lat)
    url = url .. "&lon="
    url = url .. ToString(lon)
    Local result = RQWeatherClient._getWithNotification(url, 30)
    Return (WeatherResponseDTO:ParseFromJsonString(result))
EndFunction

Function RQWeatherClient.GetForecast(lat, lon)
    Local url = RQWeatherClient._baseUrl .. "/forecast?lat="
    url = url .. ToString(lat)
    url = url .. "&lon="
    url = url .. ToString(lon)
    Local result = RQWeatherClient._getWithNotification(url, 30)
    Return (ForecastDTO:ParseFromJsonString(result))
EndFunction

Function RQWeatherClient.GetGeoData(city, stateCode, countryCode)
	If IsNil(stateCode) Then stateCode = StringUtils.EMPTY
	If IsNil(countryCode) Then countryCode = StringUtils.EMPTY

    stateCode = StringUtils.StripPrettyPrintChars(stateCode)
    countryCode = StringUtils.StripPrettyPrintChars(countryCode)

    Local url = RQWeatherClient._baseUrl .. "/geo?city="
    url = url .. city

    If Not (StringUtils.IsEmpty(stateCode))
        url = url .. stateCode
    EndIf

    If Not (StringUtils.IsEmpty(countryCode))
        url = url .. countryCode
    EndIf

    Local result = RQWeatherClient._getWithNotification(url, 30)
    Return (GeoDTO:ParseFromJsonString(result))
EndFunction

Function RQWeatherClient.GetFile(inUrl, localFile)
	Local done = False
	RQWeatherClient._downloading = True

    RQWeatherClient._dlHandle = DownloadFile(inUrl, {Async=True, Adapter="hurl", File=localFile}, RQWeatherClient._eventXferProgress)
	Repeat done = ContinueAsyncOperation(RQWeatherClient._dlHandle)
		VWait()
	Until done Or Not RQWeatherClient._downloading
	
	RQWeatherClient._downloading = False
	Local stat = RQWeatherClient._hurl:GetInfo_ResponseCode()
	RQWeatherClient._eventDownloadComplete(inUrl, stat, localFile)
EndFunction
