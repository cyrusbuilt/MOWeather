; Window message constants
Const #MSG_CLASS_BUTTON = "Button"
Const #MSG_CLASS_MNUITM = "Menuitem"
Const #MSG_CLASS_COMBOBOX = "Combobox"
Const #MSG_ATTR_PRESSED = "Pressed"
Const #MSG_ATTR_SELECTED = "Selected"
Const #MSG_TE_LOG = "teLog"

; Buttons
Const #BTN_SEL_LOC = "btnSelectLoc"
Const #BTN_GET_WEATHER = "btnGetWeather"
Const #BTN_FETCH = "btnFetch"

; Menus
Const #MNU_ABOUT = "mnuAbout"
Const #MNU_QUIT = "mnuQuit"
Const #MNU_PREFS = "mnuPreferences"

; Text input fields
Const #TE_CITY = "teCity"
Const #TE_STATE_CODE = "teStateCode"
Const #TE_COUNTRY_CODE = "teCountryCode"

; Labels
Const #LBL_LATITUDE = "lblLatitude"
Const #LBL_LONGITUDE = "lblLongitude"
Const #LBL_RIGHT_NOW = "lblRightNow"
Const #LBL_CURRENT_TEMP = "lblTemp"
Const #LBL_HIGH_TEMP = "lblHighTemp"
Const #LBL_LOW_TEMP = "lblLowTemp"
Const #LBL_HUMIDITY = "lblHumidity"
Const #LBL_CLOUDINESS = "lblCloudiness"
Const #LBL_RAIN = "lblRain"
Const #LBL_SUNRISE = "lblSunrise"
Const #LBL_FEELS_LIKE = "lblFeelsLike"
Const #LBL_PRESSURE = "lblPressure"
Const #LBL_VISIBILITY = "lblVisibility"
Const #LBL_WIND = "lblWind"
Const #LBL_SNOW = "lblSnow"
Const #LBL_SUNSET = "lblSunset"
Const #LBL_DAY_1 = "lblDay1"
Const #LBL_DAY_1_COND = "lblDay1Cond"
Const #LBL_DAY_1_TEMPS = "lblDay1Temps"
Const #LBL_DAY_2 = "lblDay2"
Const #LBL_DAY_2_COND = "lblDay2Cond"
Const #LBL_DAY_2_TEMPS = "lblDay2Temps"
Const #LBL_DAY_3 = "lblDay3"
Const #LBL_DAY_3_COND = "lblDay3Cond"
Const #LBL_DAY_3_TEMPS = "lblDay3Temps"
Const #LBL_DAY_4 = "lblDay4"
Const #LBL_DAY_4_COND = "lblDay4Cond"
Const #LBL_DAY_4_TEMPS = "lblDay4Temps"
Const #LBL_DAY_5 = "lblDay5"
Const #LBL_DAY_5_COND = "lblDay5Cond"
Const #LBL_DAY_5_TEMPS = "lblDay5Temps"

; Progress bars
Const #PB_PROGRESS = "pbProgress"

; Image boxes
Const #IMG_COND = "imgCondition"
Const #IMG_DAY_1_COND = "imgDay1Cond"
Const #IMG_DAY_2_COND = "imgDay2Cond"
Const #IMG_DAY_3_COND = "imgDay3Cond"
Const #IMG_DAY_4_COND = "imgDay4Cond"
Const #IMG_DAY_5_COND = "imgDay5Cond"

; File IDs
Const #FILE_WINDOW_DEF = "MainWindow.xml"
Const #FILE_BRUSH_DEF_ICON = "icons/weather.png"
Const #ID_WINDOW_DEF = 1
Const #ID_BRUSH_WEATHER_COND = 2

@INCLUDE "RQWeatherClient/RQWeatherClient.hws"
@INCLUDE "RQWeatherClient/HTTPStatus.hws"
@INCLUDE "RQWeatherClient/DTO/GeoDTO.hws"
@INCLUDE "RQWeatherClient/DTO/PrecipitationDTO.hws"
@INCLUDE "StringLib/StringUtils.hws"
@INCLUDE "AppUtil.hws"
@INCLUDE "Preferences.hws"
@INCLUDE "PrefsWindow.hws"
@INCLUDE "SelectLocationWindow.hws"
@INCLUDE "IconCacheLib/IconCache.hws"

Global MainWindow = {}
MainWindow._currentLocation = {}
MainWindow._downloading = False
MainWindow._imageIndex = 0
MainWindow._currentFilename = StringUtils.EMPTY
MainWindow._prefsWindow = {}
MainWindow._selLocWindow = {}
MainWindow._forecast = {}

Function MainWindow:_log(text)
    Local eolIndex = 0
    Local currentText = moai.Get(#MSG_TE_LOG, "Text")
    Local len = StringUtils.StringLength(currentText)
    If len > 5000
        eolIndex = StringUtils.IndexOf(currentText, "\n", 0)
        currentText = StringUtils.Substring(currentText, eolIndex, len - eolIndex)
    EndIf

    Local timestamp = GetDate() .. " " .. GetTime()
    currentText = currentText .. "\n" .. timestamp .. " - " .. text .. "\n"
    moai.Set(#MSG_TE_LOG, "Text", currentText)

    Local pos = StringUtils.StringLength(currentText) - 1
    moai.Set(#MSG_TE_LOG, "CursorPos", pos)
EndFunction

Function MainWindow:_setProgressBar(current, maxVal)
	If IsNil(current) Then value = 0
	If IsNil(maxVal) Then max = 0
	moai.Set(#PB_PROGRESS, "Max", maxVal)
	moai.Set(#PB_PROGRESS, "Level", current)
EndFunction

Function MainWindow:_reload()
	Preferences.Load()
	RQWeatherClient.Address = Preferences.ApiHostAddress
	RQWeatherClient.Port = Preferences.ApiHostPort
	If GetType(self._currentLocation) <> #TABLE Or IsTableEmpty(self._currentLocation)
		If Preferences.LocationLatitude <> 0 And Preferences.LocationLongitude <> 0
			self._currentLocation = GeoDTO:New()
			self._currentLocation.Latitude = Preferences.LocationLatitude
			self._currentLocation.Longitude = Preferences.LocationLongitude
			self._currentLocation.Name = Preferences.LocationCity
			self._currentLocation.State = Preferences.LocationState
			self._currentLocation.Country = Preferences.LocationCountryCode
		Else
			Return ()
		EndIf
	EndIf
	
	moai.Set(#TE_CITY, "Text", self._currentLocation.name)
	moai.Set(#TE_STATE_CODE, "Text", self._currentLocation.state)
	moai.Set(#TE_COUNTRY_CODE, "Text", self._currentLocation.country)
	moai.Set(#LBL_LATITUDE, "Text", ToString(self._currentLocation.latitude))
	moai.Set(#LBL_LONGITUDE, "Text", ToString(self._currentLocation.longitude))
	self:_setProgressBar(0, 100)
EndFunction

Function MainWindow:SetCurrentLocation(location)
	self._currentLocation = location
	If GetType(self._currentLocation) = #TABLE
		Preferences.LocationLatitude = self._currentLocation.latitude
		Preferences.LocationLongitude = self._currentLocation.longitude
		Preferences.LocationCity = self._currentLocation.name
		Preferences.LocationState = self._currentLocation.state
		Preferences.LocationCountryCode = self._currentLocation.country
		Preferences.Save()
		self:_reload()
	EndIf
EndFunction

Function MainWindow:_populateImage(expectedFileName, fileNameActual)
	If expectedFileName = self._currentFilename
		Local id = Rnd(50)
		Local absPath = CanonizePath(fileNameActual)
		If Not Exists(absPath)
			Return ()
		EndIf
		
		LoadBrush(id, absPath)
		Switch self._imageIndex
		Case 0:
			moai.Set(#IMG_COND, "Brush", id)
		Case 1:
			moai.Set(#IMG_DAY_1_COND, "Brush", id)
		Case 2:
			moai.Set(#IMG_DAY_2_COND, "Brush", id)
		Case 3:
			moai.Set(#IMG_DAY_3_COND, "Brush", id)
		Case 4:
			moai.Set(#IMG_DAY_4_COND, "Brush", id)
		Case 5:
			moai.Set(#IMG_DAY_5_COND, "Brush", id)
		EndSwitch
	EndIf
EndFunction

Function MainWindow:_loadImageFromCacheOrSource(fileUri)
	Local nameParts = StringUtils.StringSplit(fileUri, "/")
	self._currentFilename = GetItem(nameParts, TableItems(nameParts) - 1)

	Local imageFile = IconCache.GetIcon(self._currentFilename)
	If IsNil(imageFile)
		self._downloading = True
		self:_setProgressBar(0, 100)
		self:_log("Downloading image: " .. fileUri)
		RQWeatherClient.GetFile(fileUri, IconCache.GetSavePath(self._currentFilename))
	Else
		self:_log("Loading image from cache: " .. imageFile)
		self:_populateImage(self._currentFilename, imageFile)
	EndIf
EndFunction

Function MainWindow:_getCurrentWeather()
	If IsNil(self._currentLocation) Or IsTableEmpty(self._currentLocation)
		Return ()
	EndIf
	
	RQWeatherClient.Init()
	Local lat = self._currentLocation.latitude
	Local lon = self._currentLocation.longitude

	; Fetch current weather data and check response status
	Local currentWeather = RQWeatherClient.GetCurrent(lat, lon)
	If currentWeather.code = #HTTPStatus_STATUS_200_OK
		; Get current condition
		Local condition = currentWeather.weather[0]
		self._imageIndex = 0
		self:_loadImageFromCacheOrSource(condition.icon)

		; Adjust timestamp for timezone
		Local timestamp = currentWeather.timestamp
		Local tstamp = DateToTimestamp(MakeDate(timestamp))
		tstamp = tstamp + currentWeather.timezone
		Local tstampStr = TimestampToDate(tstamp)

		; Display current conditions
		moai.Set(#LBL_RIGHT_NOW, "Text", condition.description .. " as of " .. tstampStr)
		moai.Set(#LBL_CURRENT_TEMP, "Text", ToString(currentWeather.main.tempMin) .. "F")
		moai.Set(#LBL_FEELS_LIKE, "Text", ToString(currentWeather.main.feelsLike) .. "F")
		moai.Set(#LBL_HIGH_TEMP, "Text", ToString(currentWeather.main.tempMax) .. "F")
		moai.Set(#LBL_LOW_TEMP, "Text", ToString(currentWeather.main.tempMin) .. "F")
		moai.Set(#LBL_PRESSURE, "Text", ToString(currentWeather.main.pressure) .. "F")
		moai.Set(#LBL_HUMIDITY, "Text", ToString(currentWeather.main.humidity) .. "%")
		moai.Set(#LBL_VISIBILITY, "Text", ToString(currentWeather.visibility * 0.0006211371) .. " Miles")

		; Display cloud data if present
		If GetType(currentWeather.clouds) = #TABLE
			moai.Set(#LBL_CLOUDINESS, "Text", ToString(currentWeather.clouds.all) .. "%")
		EndIf

		; Display wind data if present
		If GetType(currentWeather.wind) = #TABLE
			Local windSpeed = currentWeather.wind.speed
			Local direction = currentWeather.wind:ToWindDirection()
			Local gust = currentWeather.wind.gust
			moai.Set(#LBL_WIND, "Text", ToString(windSpeed) .. "MPH " .. direction .. ", Gust: " .. ToString(gust) .. "MPH")
		EndIf

		Local oneHour = 0
		Local threeHour = 0

		; Display rain data if present
		If GetType(currentWeather.rain) = #TABLE
			If HaveItem(currentWeather.rain, #K_P_ONE_HOUR_KEY) And HaveItem(currentWeather.rain, #K_P_THREE_HOUR_KEY)
				oneHour = currentWeather.rain.oneHour / 25.4
				threeHour = currentWeather.rain.threeHour / 25.4
				moai.Set(#LBL_RAIN, "Text", "Last Hour: " .. ToString(Round(oneHour)) .. ", Last 3 Hours: " .. ToString(Round(threeHour)))
			EndIf
		EndIf

		; Display snow data if present
		If GetType(currentWeather.snow) = #table
			If HaveItem(currentWeather.snow, #K_P_ONE_HOUR_KEY) And HaveItem(currentWeather.snow, #K_P_THREE_HOUR_KEY)
				oneHour = currentWeather.snow.oneHour / 25.4
				threeHour = currentWeather.snow.threeHour / 25.4
				moai.Set(#LBL_SNOW, "Text", "Last Hour: " .. ToString(Round(oneHour)) .. ", Last 3 Hours: " .. ToString(Round(threeHour)))
			EndIf
		EndIf

		; Compute and display sunrise timestamp adjusted for timezone
		timestamp = currentWeather.system.sunrise
		tstamp = DateToTimestamp(MakeDate(timestamp))
		tstamp = tstamp + currentWeather.timezone
		Local sunrise = TimestampToDate(tstamp)
		moai.Set(#LBL_SUNRISE, "Text", sunrise)

		; Compute and display sunset timestamp adjusted for timezone
		timestamp = currentWeather.system.sunset
		tstamp = DateToTimestamp(MakeDate(timestamp))
		tstamp = tstamp + currentWeather.timezone
		Local sunset = TimestampToDate(tstamp)
		moai.Set(#LBL_SUNSET, "Text", sunset)
	EndIf

	CheckEvents()
	RQWeatherClient.Close()
EndFunction

Function MainWindow:_getForecast()
	If IsNil(self._currentLocation) Or IsTableEmpty(self._currentLocation)
		Return ()
	EndIf
	
	Local lat = self._currentLocation.latitude
	Local lon = self._currentLocation.longitude
	
	RQWeatherClient.Init()
	Local forecast = RQWeatherClient.GetForecast(lat, lon)
	If forecast.code = #HTTPStatus_STATUS_200_OK
		self._forecast = forecast
		DebugPrint("DEBUG: forecast data: " .. SerializeTable(self._forecast))
		Local n, i = NextItem(forecast.aggregates)
		While GetType(n) <> #NIL
			self._imageIndex = i.dayNum
			self:_loadImageFromCacheOrSource(i.icon)
			
			Local dayLabel = StringUtils.EMPTY
			Local conLabel = StringUtils.EMPTY
			Local tempLabel = StringUtils.EMPTY
			Switch i.dayNum
			Case 1:
				dayLabel = #LBL_DAY_1
				conLabel = #LBL_DAY_1_COND
				tempLabel = #LBL_DAY_1_TEMPS
			Case 2:
				dayLabel = #LBL_DAY_2
				conLabel = #LBL_DAY_2_COND
				tempLabel = #LBL_DAY_2_TEMPS
			Case 3:
				dayLabel = #LBL_DAY_3
				conLabel = #LBL_DAY_3_COND
				tempLabel = #LBL_DAY_3_TEMPS
			Case 4:
				dayLabel = #LBL_DAY_4
				conLabel = #LBL_DAY_4_COND
				tempLabel = #LBL_DAY_4_TEMPS
			Case 5:
				dayLabel = #LBL_DAY_5
				conLabel = #LBL_DAY_5_COND
				tempLabel = #LBL_DAY_5_TEMPS
			EndSwitch
			
			moai.Set(dayLabel, "Text", i.dateString)
			moai.Set(conLabel, "Text", i.weatherType)
			moai.Set(tempLabel, "Text", "Hi: " .. ToString(i.tempHigh) .. " Lo " .. ToString(i.tempLow))
			n, i = NextItem(forecast.aggregates, n)
		Wend
	EndIf
	
	CheckEvents()
	RQWeatherClient.Close()
EndFunction

Function MainWindow:ProcessGUI(message)
	If IsNil(message) Then Return ()
	DebugPrint("DEBUG: Event class: " .. message.Class)
    DebugPrint("DEBUG: Event attrib: " .. message.Attribute)
    DebugPrint("DEBUG: Event ID: " .. message.ID)
    Switch message.Class
    Case #MSG_CLASS_BUTTON:
        Switch message.Attribute
        Case #MSG_ATTR_PRESSED:
            Switch message.ID
            Case #BTN_SEL_LOC:
				self._selLocWindow:Show()
            Case #BTN_GET_WEATHER:
				self:_getCurrentWeather()
            Case #BTN_FETCH:
				self:_getForecast()
            EndSwitch
        EndSwitch
    Case #MSG_CLASS_MNUITM:
        Switch message.Attribute
		Case #MSG_ATTR_SELECTED:
			Switch message.ID
        	Case #MNU_ABOUT:
            	moai.Request("About", "MOWeather\n© 2025 by Cyrus Brunner", "OK")
        	Case #MNU_QUIT:
            	End
			Case #MNU_PREFS:
				self._prefsWindow:Show()
        	EndSwitch
		EndSwitch
    EndSwitch
	
	If self._prefsWindow.Shown
		self._prefsWindow:DoEvents(message)
	EndIf
	
	If self._selLocWindow.Shown
		self._selLocWindow:DoEvents(message)
	EndIf
EndFunction

Function MainWindow:_receiveProgress(totalBytes, bytesReceived)
	If IsNil(totalBytes) Or totalBytes = 0 Then totalBytes = 1
	If IsNil(bytesReceived) Or bytesReceived = 0 Then bytesReceived = 1
	self._downloading = True
	Local value = (bytesReceived * 100) / totalBytes
	self:_setProgressBar(value, totalBytes)
EndFunction

Function MainWindow:_processingRequest()
	self:_log("Beginning API request")
EndFunction

Function MainWindow:_processingComplete()
	self:_log("API request complete")
EndFunction

Function MainWindow:_downloadComplete(url, httpStatus, filePath)
	self:_setProgressBar(100, 100)
	If httpStatus = #HTTPStatus_STATUS_200_OK And Not(IsNil(filePath))
		self:_populateImage(FilePart(filePath), filePath)
	EndIf
	
	self._downloading = False
EndFunction

Function MainWindow:_connected()
	self:_log("Client connected")
EndFunction

Function MainWindow:_apiSuccess(errorCode, desc)
	self:_log("Request result: [" .. ToString(errorCode) .. "] " .. desc)
EndFunction

Function MainWindow:_apiError(errorCode, desc, inUrl, inResponse)
	self:_log("API Error: [" .. ToString(errorCode) .. "] " .. desc .. " (URL: " .. inUrl .. ")")
	self:_log("Error response: " .. inResponse)
EndFunction

Function MainWindow:Show()
	; Load GUI definition file
	@FILE #ID_WINDOW_DEF, #FILE_WINDOW_DEF

	; Load default weather icon
	LoadBrush(#ID_BRUSH_WEATHER_COND, #FILE_BRUSH_DEF_ICON)

	moai.CreateApp(ReadString(#ID_WINDOW_DEF))

	IconCache.Init()
	IconCache.ClearCache()
	
	RQWeatherClient.OnProcessingRequest = Function() self:_processingRequest() EndFunction 
	RQWeatherClient.OnProcessingComplete = function() self:_processingComplete() EndFunction
	RQWeatherClient.OnXferProgress = Function(totalBytes, bytesReceived) self:_receiveProgress(totalBytes, bytesReceived) EndFunction
	RQWeatherClient.OnDownloadComplete = Function(url, httpStatus, filePath) self:_downloadComplete(url, httpStatus, filePath) EndFunction
	RQWeatherClient.OnConnected = Function() self:_connected() EndFunction
	RQWeatherClient.OnApiSuccess = Function(errorCode, desc) self:_apiSuccess(errorCode, desc) EndFunction
	RQWeatherClient.OnApiError = Function(errorCode, desc, inUrl, inResponse) self:_apiError(errorCode, desc, inUrl, inResponse) EndFunction
	
	self:_reload()
	self:_log("Ready.")
EndFunction

Function MainWindow:New()
	Local instance = CopyTable(self)
	instance._prefsWindow = PrefsWindow:New()
	instance._selLocWindow = SelectLocationWindow:New(instance)
	Return (instance)
EndFunction
